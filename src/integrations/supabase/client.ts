
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://heozxmzglhrbrzpsvbrh.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imhlb3p4bXpnbGhyYnJ6cHN2YnJoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU4NzIyNTksImV4cCI6MjA2MTQ0ODI1OX0.WDib-BNHRslc7c1wTRdzufT23mCpM-TBhA_CpyxMln4";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Transaction functions
export const beginTransaction = async () => {
  try {
    return await supabase.rpc('begin_transaction');
  } catch (error) {
    console.error('Error beginning transaction:', error);
    throw error;
  }
};

export const commitTransaction = async () => {
  try {
    return await supabase.rpc('commit_transaction');
  } catch (error) {
    console.error('Error committing transaction:', error);
    throw error;
  }
};

export const rollbackTransaction = async () => {
  try {
    return await supabase.rpc('rollback_transaction');
  } catch (error) {
    console.error('Error rolling back transaction:', error);
    throw error;
  }
};

// Update proforma invoice functions
export const updateProformaInvoice = async (id: string, data: any) => {
  try {
    const { error } = await supabase
      .from('proforma_invoices')
      .update(data)
      .eq('id', id);
    
    if (error) throw error;
    return { success: true };
  } catch (error) {
    console.error('Error updating proforma invoice:', error);
    throw error;
  }
};

// Update proforma invoice items functions
export const updateProformaInvoiceItems = async (proformaId: string, items: any[]) => {
  try {
    // Start a transaction
    await beginTransaction();
    
    // Delete existing items for this proforma
    const { error: deleteError } = await supabase
      .from('proforma_invoice_items')
      .delete()
      .eq('proformainvoiceid', proformaId);
    
    if (deleteError) {
      await rollbackTransaction();
      throw deleteError;
    }
    
    // Insert new items
    const itemLinks = items.map(item => ({
      proformainvoiceid: proformaId,
      itemid: item.id
    }));
    
    const { error: insertError } = await supabase
      .from('proforma_invoice_items')
      .insert(itemLinks);
    
    if (insertError) {
      await rollbackTransaction();
      throw insertError;
    }
    
    // Commit the transaction
    await commitTransaction();
    
    return { success: true };
  } catch (error) {
    console.error('Error updating proforma invoice items:', error);
    await rollbackTransaction();
    throw error;
  }
};

export const deleteProformaInvoice = async (id: string) => {
  try {
    // Start by deleting related records in the junction table
    const { error: itemsError } = await supabase
      .from('proforma_invoice_items')
      .delete()
      .eq('proformainvoiceid', id);
    
    if (itemsError) throw itemsError;
    
    // Then delete the proforma invoice
    const { error } = await supabase
      .from('proforma_invoices')
      .delete()
      .eq('id', id);
    
    if (error) throw error;
    return { success: true };
  } catch (error) {
    console.error('Error deleting proforma invoice:', error);
    throw error;
  }
};

// Update final invoice functions
export const updateFinalInvoice = async (id: string, data: any) => {
  try {
    const { error } = await supabase
      .from('final_invoices')
      .update(data)
      .eq('id', id);
    
    if (error) throw error;
    return { success: true };
  } catch (error) {
    console.error('Error updating final invoice:', error);
    throw error;
  }
};

export const deleteFinalInvoice = async (id: string) => {
  try {
    // Start by deleting related records in the junction table
    const { error: itemsError } = await supabase
      .from('final_invoice_items')
      .delete()
      .eq('finalinvoiceid', id);
    
    if (itemsError) throw itemsError;
    
    // Then delete the final invoice
    const { error } = await supabase
      .from('final_invoices')
      .delete()
      .eq('id', id);
    
    if (error) throw error;
    return { success: true };
  } catch (error) {
    console.error('Error deleting final invoice:', error);
    throw error;
  }
};

// Update delivery note functions
export const updateDeliveryNote = async (id: string, data: any) => {
  try {
    const { error } = await supabase
      .from('delivery_notes')
      .update(data)
      .eq('id', id);
    
    if (error) throw error;
    return { success: true };
  } catch (error) {
    console.error('Error updating delivery note:', error);
    throw error;
  }
};

export const deleteDeliveryNote = async (id: string) => {
  try {
    // Start by deleting related records in the junction table
    const { error: itemsError } = await supabase
      .from('delivery_note_items')
      .delete()
      .eq('deliverynoteid', id);
    
    if (itemsError) throw itemsError;
    
    // Then delete the delivery note
    const { error } = await supabase
      .from('delivery_notes')
      .delete()
      .eq('id', id);
    
    if (error) throw error;
    return { success: true };
  } catch (error) {
    console.error('Error deleting delivery note:', error);
    throw error;
  }
};

// Function to handle disconnecting a proforma from a final invoice
export const undoProformaConversion = async (proformaId: string, finalInvoiceId: string) => {
  try {
    // Update the proforma invoice to remove the finalInvoiceId reference
    const { error: proformaError } = await supabase
      .from('proforma_invoices')
      .update({ finalinvoiceid: null })
      .eq('id', proformaId);
    
    if (proformaError) throw proformaError;
    
    // Delete the final invoice
    return await deleteFinalInvoice(finalInvoiceId);
  } catch (error) {
    console.error('Error undoing proforma conversion:', error);
    throw error;
  }
};
